import csv

ERROR_BLOCK_TABLE = {
    'L': [
        (1, 26, 19, 2),
        (1, 44, 34, 4),
        (1, 70, 55, 7),
        (1, 100, 80, 10),
        (1, 134, 108, 13),
        (2, 86, 68, 9),
        (2, 98, 78, 10),
        (2, 121, 97, 12),
        (2, 146, 116, 15),
        (2, 86, 68, 9, 2, 87, 69, 9),
        (4, 101, 81, 10),
        (2, 116, 92, 12, 2, 117, 93, 12),
        (4, 133, 107, 13),
        (3, 145, 115, 15, 1, 146, 116, 15),
        (5, 109, 87, 11, 1, 110, 88, 11),
        (5, 122, 98, 12, 1, 123, 99, 12),
        (1, 135, 107, 14, 5, 136, 108, 14),
        (5, 150, 120, 15, 1, 151, 121, 15),
        (3, 141, 113, 14, 4, 142, 114, 14),
        (3, 135, 107, 14, 5, 136, 108, 14),
        (4, 144, 116, 14, 4, 145, 117, 14),
        (2, 139, 111, 14, 7, 140, 112, 14),
        (4, 151, 121, 15, 5, 152, 122, 15),
        (6, 147, 117, 15, 4, 148, 118, 15),
        (8, 132, 106, 13, 4, 133, 107, 13),
        (10, 142, 114, 14, 2, 143, 115, 14),
        (8, 152, 122, 15, 4, 153, 123, 15),
        (3, 147, 117, 15, 10, 148, 118, 15),
        (7, 146, 116, 15, 7, 147, 117, 15),
        (5, 145, 115, 15, 10, 146, 116, 15),
        (13, 145, 115, 15, 3, 146, 116, 15),
        (17, 145, 115, 15),
        (17, 145, 115, 15, 1, 146, 116, 15),
        (13, 145, 115, 15, 6, 146, 116, 15),
        (12, 151, 121, 15, 7, 152, 122, 15),
        (6, 151, 121, 15, 14, 152, 122, 15),
        (17, 152, 122, 15, 4, 153, 123, 15),
        (4, 152, 122, 15, 18, 153, 123, 15),
        (20, 147, 117, 15, 4, 148, 118, 15),
        (19, 148, 118, 15, 6, 149, 119, 15),
    ],
    'M': [
        (1, 26, 16, 4),
        (1, 44, 28, 8),
        (1, 70, 44, 13),
        (2, 50, 32, 9),
        (2, 67, 43, 12),
        (4, 43, 27, 8),
        (4, 49, 31, 9),
        (2, 60, 38, 11, 2, 61, 39, 11),
        (3, 58, 36, 11, 2, 59, 37, 11),
        (4, 69, 43, 13, 1, 70, 44, 13),
        (1, 80, 50, 15, 4, 81, 51, 15),
        (6, 58, 36, 11, 2, 59, 37, 11),
        (8, 59, 37, 11, 1, 60, 38, 11),
        (4, 64, 40, 12, 5, 65, 41, 12),
        (5, 65, 41, 12, 5, 66, 42, 12),
        (7, 73, 45, 14, 3, 74, 46, 14),
        (10, 74, 46, 14, 1, 75, 47, 14),
        (9, 69, 43, 13, 4, 70, 44, 13),
        (3, 70, 44, 13, 11, 71, 45, 13),
        (3, 67, 41, 13, 13, 68, 42, 13),
        (17, 68, 42, 13),
        (17, 74, 46, 14),
        (4, 75, 47, 14, 14, 76, 48, 14),
        (6, 73, 45, 14, 14, 74, 46, 14),
        (8, 75, 47, 14, 13, 76, 48, 14),
        (19, 74, 46, 14, 4, 75, 47, 14),
        (22, 73, 45, 14, 3, 74, 46, 14),
        (3, 73, 45, 14, 23, 74, 46, 14),
        (21, 73, 45, 14, 7, 74, 46, 14),
        (19, 75, 47, 14, 10, 76, 48, 14),
        (2, 74, 46, 14, 29, 75, 47, 14),
        (10, 74, 46, 14, 23, 75, 47, 14),
        (14, 74, 46, 14, 21, 75, 47, 14),
        (14, 74, 46, 14, 23, 75, 47, 14),
        (12, 75, 47, 14, 26, 76, 48, 14),
        (6, 75, 47, 14, 34, 76, 48, 14),
        (29, 74, 46, 14, 14, 75, 47, 14),
        (13, 74, 46, 14, 32, 75, 47, 14),
        (40, 75, 47, 14, 7, 76, 48, 14),
        (18, 75, 47, 14, 31, 76, 48, 14),
    ],
    'Q': [
        (1, 26, 13, 6),
        (1, 44, 22, 11),
        (2, 35, 17, 9),
        (2, 50, 24, 13),
        (2, 33, 15, 9, 2, 34, 16, 9),
        (4, 43, 19, 12),
        (2, 32, 14, 9, 4, 33, 15, 9),
        (4, 40, 18, 11, 2, 41, 19, 11),
        (4, 36, 16, 10, 4, 37, 17, 10),
        (6, 43, 19, 12, 2, 44, 20, 12),
        (4, 50, 22, 14, 4, 51, 23, 14),
        (4, 46, 20, 13, 6, 47, 21, 13),
        (8, 44, 20, 12, 4, 45, 21, 12),
        (11, 36, 16, 10, 5, 37, 17, 10),
        (5, 54, 24, 15, 7, 55, 25, 15),
        (15, 43, 19, 12, 2, 44, 20, 12),
        (1, 50, 22, 14, 15, 51, 23, 14),
        (17, 50, 22, 14, 1, 51, 23, 14),
        (17, 47, 21, 13, 4, 48, 22, 13),
        (15, 54, 24, 15, 5, 55, 25, 15),
        (17, 50, 22, 14, 6, 51, 23, 14),
        (7, 54, 24, 15, 16, 55, 25, 15),
        (11, 54, 24, 15, 14, 55, 25, 15),
        (11, 54, 24, 15, 16, 55, 25, 15),
        (7, 54, 24, 15, 22, 55, 25, 15),
        (28, 50, 22, 14, 6, 51, 23, 14),
        (8, 53, 23, 15, 26, 54, 24, 15),
        (4, 54, 24, 15, 31, 55, 25, 15),
        (1, 53, 23, 15, 37, 54, 24, 15),
        (15, 54, 24, 15, 25, 55, 25, 15),
        (42, 54, 24, 15, 1, 55, 25, 15),
        (10, 54, 24, 15, 35, 55, 25, 15),
        (29, 54, 24, 15, 19, 55, 25, 15),
        (44, 54, 24, 15, 7, 55, 25, 15),
        (39, 54, 24, 15, 14, 55, 25, 15),
        (46, 54, 24, 15, 10, 55, 25, 15),
        (49, 54, 24, 15, 10, 55, 25, 15),
        (48, 54, 24, 15, 14, 55, 25, 15),
        (43, 54, 24, 15, 22, 55, 25, 15),
        (34, 54, 24, 15, 34, 55, 25, 15),
    ],
    'H': [
        (1, 26, 9, 8),
        (1, 44, 16, 14),
        (2, 35, 13, 11),
        (4, 25, 9, 8),
        (2, 33, 11, 11, 2, 34, 12, 11),
        (4, 43, 15, 14),
        (4, 39, 13, 13, 1, 40, 14, 13),
        (4, 40, 14, 13, 2, 41, 15, 13),
        (4, 36, 12, 12, 4, 37, 13, 12),
        (6, 43, 15, 14, 2, 44, 16, 14),
        (3, 36, 12, 12, 8, 37, 13, 12),
        (7, 42, 14, 14, 4, 43, 15, 14),
        (12, 33, 11, 11, 4, 34, 12, 11),
        (11, 36, 12, 12, 5, 37, 13, 12),
        (11, 36, 12, 12, 7, 37, 13, 12),
        (3, 45, 15, 15, 13, 46, 16, 15),
        (2, 42, 14, 14, 17, 43, 15, 14),
        (2, 42, 14, 14, 19, 43, 15, 14),
        (9, 39, 13, 13, 16, 40, 14, 13),
        (15, 43, 15, 14, 10, 44, 16, 14),
        (19, 46, 16, 15, 6, 47, 17, 15),
        (34, 37, 13, 12),
        (16, 45, 15, 15, 14, 46, 16, 15),
        (30, 46, 16, 15, 2, 47, 17, 15),
        (22, 45, 15, 15, 13, 46, 16, 15),
        (33, 46, 16, 15, 4, 47, 17, 15),
        (12, 45, 15, 15, 28, 46, 16, 15),
        (11, 45, 15, 15, 31, 46, 16, 15),
        (19, 45, 15, 15, 26, 46, 16, 15),
        (23, 45, 15, 15, 25, 46, 16, 15),
        (23, 45, 15, 15, 28, 46, 16, 15),
        (19, 45, 15, 15, 35, 46, 16, 15),
        (11, 45, 15, 15, 46, 46, 16, 15),
        (59, 46, 16, 15, 1, 47, 17, 15),
        (22, 45, 15, 15, 41, 46, 16, 15),
        (2, 45, 15, 15, 64, 46, 16, 15),
        (24, 45, 15, 15, 46, 46, 16, 15),
        (42, 45, 15, 15, 32, 46, 16, 15),
        (10, 45, 15, 15, 67, 46, 16, 15),
        (20, 45, 15, 15, 61, 46, 16, 15),
    ]
}

QRCODE_CAPACITY = {
    'L': [],
    'M': [],
    'Q': [],
    'H': []
}

with open('size.csv', mode='r') as file:
    reader = csv.reader(file)
    attrs = []
    for row in reader:
        if len(attrs) < 1:
            attrs = row
            continue
        for key, value in zip(attrs, row):
            QRCODE_CAPACITY[key].append(int(value))

ALIGN_PATTERN_POSITION = [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170],
]

MASK_BITS = ['000', '001', '010', '011', '100', '101', '110', '111']
MASK_FUNCTION = {
    '000': lambda i, j: (i + j) % 2 == 0,
    '001': lambda i, j: i % 2 == 0,
    '010': lambda i, j: j % 3 == 0,
    '011': lambda i, j: (i + j) % 3 == 0,
    '100': lambda i, j: (i // 2 + j // 3) % 2 == 0,
    '101': lambda i, j: (i * j) % 2 + (i * j) % 3 == 0,
    '110': lambda i, j: ((i * j) % 2 + (i * j) % 3) % 2 == 0,
    '111': lambda i, j: ((i * j) % 3 + (i + j) % 2) % 2 == 0,
}

ERROR_LEVEL_BITS = {
    'L': '01',
    'M': '00',
    'Q': '11',
    'H': '10'
}

ERROR_LEVEL_L = 'L'
ERROR_LEVEL_M = 'M'
ERROR_LEVEL_Q = 'Q'
ERROR_LEVEL_H = 'H'

MODE_BITS = {
    'Numeric': '0001',
    'Alphanumeric': '0010',
    'Byte': '0100'
}
